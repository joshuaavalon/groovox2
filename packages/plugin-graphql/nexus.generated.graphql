### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

input BooleanFilter {
  equal: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateNullableFilter {
  equal: Date
  gt: Date
  gte: Date
  in: [Date!]
  lt: Date
  lte: Date
  not: DateNullableFilter
  notIn: [Date!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equal: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

"""The `Decimal` scalar type to represent values"""
scalar Decimal

input DecimalNullableFilter {
  equal: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: DecimalNullableFilter
  notIn: [Decimal!]
}

type Movie {
  _id: ID!
  airedDate: Date
  alias: [String!]!
  contentRating: String!
  createdAt: DateTime!
  description: String!
  id: UUID!
  name: String!
  nameSort: String!
  rating: Decimal
  roles: [MovieRole!]!
  studios(orderBy: [StudioOrderByInput!]): [Studio!]!
  tagline: String!
  tags(orderBy: [TagOrderByInput!]): [Tag!]!
  updatedAt: DateTime!
}

input MovieCreateOneInput {
  airedDate: Date
  contentRating: String!
  description: String! = ""
  name: String!
  nameSort: String!
  rating: Decimal
  roles: [MovieRoleCreateOneInput!]! = []
  studioIds: [UUID!]! = []
  tagline: String! = ""
}

input MovieFindManyInput {
  airedDate: DateNullableFilter
  and: [MovieFindManyInput!]
  contentRating: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: UUIDFilter
  name: StringFilter
  nameSort: StringFilter
  not: [MovieFindManyInput!]
  or: [MovieFindManyInput!]
  rating: DecimalNullableFilter
  tagline: StringFilter
  updatedAt: DateTimeFilter
}

input MovieFindOneInput {
  id: UUID!
}

input MovieOrderByInput {
  airedDate: SortOrder
  contentRating: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  nameSort: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
}

type MovieRole {
  _id: ID!
  id: UUID!
  movie: Movie!
  person: Person!
  role: String!
  type: String!
}

input MovieRoleCreateOneInput {
  movieId: UUID!
  personId: UUID!
  role: String!
  type: String!
}

input MovieRoleFindOneInput {
  id: UUID!
}

input MovieRoleUpdateOneInput {
  personId: UUID
  role: String
  type: String
}

input MovieUpdateOneInput {
  airedDate: Date
  contentRating: String
  description: String
  name: String
  nameSort: String
  rating: Decimal
  studioIds: [UUID!]
  tagline: String
}

type Mutation {
  createMovie(data: MovieCreateOneInput!): Movie!
  createPerson(data: PersonCreateOneInput!): Person!
  createStudio(data: StudioCreateOneInput!): Studio!
  createTag(data: TagCreateOneInput!): Tag!
  createTagCategory(data: TagCategoryCreateOneInput!): TagCategory!
  createUnit(data: UnitCreateOneInput!): Unit!
  removeMovies(where: MovieFindManyInput!): AffectedRowsOutput!
  removePeople(where: PersonFindManyInput!): AffectedRowsOutput!
  removeStudios(where: StudioFindManyInput!): AffectedRowsOutput!
  removeTagCategories(where: TagCategoryFindManyInput!): AffectedRowsOutput!
  removeTags(where: TagFindManyInput!): AffectedRowsOutput!
  removeUnits(where: UnitFindManyInput!): AffectedRowsOutput!
  updateMovie(data: MovieUpdateOneInput!, where: MovieFindOneInput!): Movie!
  updateMovieRole(data: MovieRoleUpdateOneInput!, where: MovieRoleFindOneInput!): MovieRole!
  updatePerson(data: PersonUpdateOneInput!, where: PersonFindOneInput!): Person!
  updateStudio(data: StudioUpdateOneInput!, where: StudioFindOneInput!): Studio!
  updateTag(data: TagUpdateOneInput!, where: TagFindOneInput!): Tag!
  updateTagCategory(data: TagCategoryUpdateOneInput!, where: TagCategoryFindOneInput!): TagCategory!
  updateUnit(data: UnitUpdateOneInput!, where: UnitFindOneInput!): Unit!
}

"""Control the range of the records to return."""
input Pagination {
  """Number of records to skip. Must be greater or equal than 0."""
  skip: Int

  """Maximum number of records to return. Must be greater than 0."""
  take: Int
}

type Person {
  _id: ID!
  birthDate: Date
  createdAt: DateTime!
  deathDate: Date
  description: String!
  id: UUID!
  nameFirst: String!
  nameLast: String!
  nameMiddle: String!
  nameSort: String!
  sex: String!
  tags: [Tag!]!
  units: [Unit!]!
  updatedAt: DateTime!
}

input PersonCreateOneInput {
  birthDate: Date
  deathDate: Date
  description: String! = ""
  nameFirst: String!
  nameLast: String!
  nameMiddle: String!
  nameSort: String!
  sex: String!
}

input PersonFindManyInput {
  and: [PersonFindManyInput!]
  birthDate: DateNullableFilter
  createdAt: DateTimeFilter
  deathDate: DateNullableFilter
  description: StringFilter
  id: UUIDFilter
  nameFirst: StringFilter
  nameLast: StringFilter
  nameMiddle: StringFilter
  nameSort: StringFilter
  not: [PersonFindManyInput!]
  or: [PersonFindManyInput!]
  sex: StringFilter
  updatedAt: DateTimeFilter
}

input PersonFindOneInput {
  id: UUID!
}

input PersonOrderByInput {
  birthDate: SortOrder
  createdAt: SortOrder
  deathDate: SortOrder
  id: SortOrder
  nameFirst: SortOrder
  nameLast: SortOrder
  nameMiddle: SortOrder
  nameSort: SortOrder
  sex: SortOrder
  updatedAt: SortOrder
}

input PersonUpdateOneInput {
  birthDate: Date
  deathDate: Date
  description: String
  nameFirst: String
  nameLast: String
  nameMiddle: String
  nameSort: String
  sex: String
  tagIds: [UUID!]
  unitIds: [UUID!]
}

type Query {
  findPeople(orderBy: [PersonOrderByInput!], pagination: Pagination, where: PersonFindManyInput): [Person!]!
  findPerson(where: PersonFindOneInput!): Person
  findStudio(where: StudioFindOneInput!): Studio
  findStudios(orderBy: [StudioOrderByInput!], pagination: Pagination, where: StudioFindManyInput): [Studio!]!
  findTag(where: TagFindOneInput!): Tag
  findTagCategories(orderBy: [TagCategoryOrderByInput!], pagination: Pagination, where: TagCategoryFindManyInput): [TagCategory!]!
  findTagCategory(where: TagCategoryFindOneInput!): TagCategory
  findTags(orderBy: [TagOrderByInput!], pagination: Pagination, where: TagFindManyInput): [Tag!]!
  findUnit(where: UnitFindOneInput!): Unit
  findUnits(orderBy: [UnitOrderByInput!], pagination: Pagination, where: UnitFindManyInput): [Unit!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contain: String
  endWith: String
  equal: String
  in: [String!]
  not: StringFilter
  notIn: [String!]
  startWith: String
}

type Studio {
  _id: ID!
  createdAt: DateTime!
  description: String!
  id: UUID!
  name: String!
  updatedAt: DateTime!
}

input StudioCreateOneInput {
  description: String! = ""
  name: String!
}

input StudioFindManyInput {
  and: [StudioFindManyInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: UUIDFilter
  name: StringFilter
  not: [StudioFindManyInput!]
  or: [StudioFindManyInput!]
  updatedAt: DateTimeFilter
}

input StudioFindOneInput {
  id: UUID!
}

input StudioOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input StudioUpdateOneInput {
  description: String
  name: String
}

type Tag {
  _id: ID!
  category: TagCategory!
  categoryId: UUID!
  createdAt: DateTime!
  description: String!
  id: UUID!
  name: String!
  updatedAt: DateTime!
}

type TagCategory {
  _id: ID!
  createdAt: DateTime!
  description: String!
  id: UUID!
  name: String!
  tags: [Tag!]!
  updatedAt: DateTime!
}

input TagCategoryCreateOneInput {
  description: String! = ""
  name: String!
}

input TagCategoryFindManyInput {
  and: [TagCategoryFindManyInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: UUIDFilter
  name: StringFilter
  not: [TagCategoryFindManyInput!]
  or: [TagCategoryFindManyInput!]
  updatedAt: DateTimeFilter
}

input TagCategoryFindOneInput {
  id: UUID!
}

input TagCategoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagCategoryUpdateOneInput {
  description: String
  name: String
}

input TagCreateOneInput {
  categoryId: UUID!
  description: String! = ""
  name: String!
}

input TagFindManyInput {
  and: [TagFindManyInput!]
  categoryId: UUIDFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: UUIDFilter
  name: StringFilter
  not: [TagFindManyInput!]
  or: [TagFindManyInput!]
  updatedAt: DateTimeFilter
}

input TagFindOneInput {
  id: UUID!
}

input TagOrderByInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagUpdateOneInput {
  categoryId: UUID
  description: String
  name: String
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UUIDFilter {
  equal: String
  in: [String!]
  not: UUIDFilter
  notIn: [String!]
}

type Unit {
  _id: ID!
  createdAt: DateTime!
  description: String!
  id: UUID!
  members: [Person!]!
  name: String!
  tags: [Tag!]!
  updatedAt: DateTime!
}

input UnitCreateOneInput {
  description: String! = ""
  name: String!
}

input UnitFindManyInput {
  and: [UnitFindManyInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: UUIDFilter
  name: StringFilter
  not: [UnitFindManyInput!]
  or: [UnitFindManyInput!]
  updatedAt: DateTimeFilter
}

input UnitFindOneInput {
  id: UUID!
}

input UnitOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UnitUpdateOneInput {
  description: String
  memberIds: [UUID!]
  name: String
  tagIds: [UUID!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
