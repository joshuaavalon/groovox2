datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique
  nameSort        String            @unique @map("name_sort")
  rating          Decimal?          @db.Decimal(3, 1)
  description     String
  releaseDate     DateTime?         @map("release_date") @db.Date
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  albumPersonRole AlbumPersonRole[]
  albumUnitRole   AlbumUnitRole[]
  track           Track[]
  tag             Tag[]             @relation("album_tag")

  @@map("album")
}

model AlbumPersonRole {
  albumId   String   @map("album_id") @db.Uuid
  personId  String   @map("person_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([albumId, personId, roleId])
  @@map("album_person_role")
}

model AlbumUnitRole {
  albumId   String   @map("album_id") @db.Uuid
  unitId    String   @map("unit_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([albumId, unitId, roleId])
  @@map("album_unit_role")
}

model Attachment {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tagId         String?      @map("tag_id") @db.Uuid
  tagCategoryId String?      @map("tag_category_id") @db.Uuid
  type          String
  description   String
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  tagCategory   TagCategory? @relation(fields: [tagCategoryId], references: [id], onUpdate: NoAction)
  tag           Tag?         @relation(fields: [tagId], references: [id], onUpdate: NoAction)

  @@map("attachment")
}

model Episode {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  contentRating String        @map("content_rating")
  airedDate     DateTime?     @map("aired_date") @db.Date
  rating        Decimal?      @db.Decimal(3, 1)
  description   String
  seasonId      String        @map("season_id") @db.Uuid
  episodeNo     Int           @map("episode_no")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  showSeason    ShowSeason    @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  episodeRole   EpisodeRole[]
  tag           Tag[]         @relation("episode_tag")

  @@unique([seasonId, episodeNo])
  @@map("episode")
}

model EpisodeRole {
  episodeId String   @map("episode_id") @db.Uuid
  personId  String   @map("person_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([episodeId, personId, roleId])
  @@map("episode_role")
}

model FlywaySchemaHistory {
  installedRank Int      @id(map: "flyway_schema_history_pk") @map("installed_rank")
  version       String?  @db.VarChar(50)
  description   String   @db.VarChar(200)
  type          String   @db.VarChar(20)
  script        String   @db.VarChar(1000)
  checksum      Int?
  installedBy   String   @map("installed_by") @db.VarChar(100)
  installedOn   DateTime @default(now()) @map("installed_on") @db.Timestamp(6)
  executionTime Int      @map("execution_time")
  success       Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
  @@map("flyway_schema_history")
}

model Movie {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique
  nameSort        String            @unique @map("name_sort")
  contentRating   String            @map("content_rating")
  airedDate       DateTime?         @map("aired_date") @db.Date
  tagline         String            @unique
  rating          Decimal?          @db.Decimal(3, 1)
  description     String
  studioId        String            @map("studio_id") @db.Uuid
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  studio          Studio            @relation(fields: [studioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movieAlias      MovieAlias[]
  moviePersonRole MoviePersonRole[]
  tag             Tag[]             @relation("movie_tag")

  @@map("movie")
}

model MovieAlias {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  alias   String
  movieId String @map("movie_id") @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("movie_alias")
}

model MoviePersonRole {
  movieId   String   @map("movie_id") @db.Uuid
  personId  String   @map("person_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([movieId, personId, roleId])
  @@map("movie_person_role")
}

model Person {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nameFirst       String            @map("name_first")
  nameMiddle      String            @map("name_middle")
  nameLast        String            @map("name_last")
  nameSort        String            @map("name_sort")
  description     String
  birthDate       DateTime?         @map("birth_date") @db.Date
  deathDate       DateTime?         @map("death_date") @db.Date
  sex             String
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  albumPersonRole AlbumPersonRole[]
  episodeRole     EpisodeRole[]
  moviePersonRole MoviePersonRole[]
  showPersonRole  ShowPersonRole[]
  showSeasonRole  ShowSeasonRole[]
  trackPersonRole TrackPersonRole[]
  tag             Tag[]             @relation("person_tag")
  unit            Unit[]            @relation("person_unit")

  @@map("person")
}

model Role {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique
  description     String
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  albumPersonRole AlbumPersonRole[]
  albumUnitRole   AlbumUnitRole[]
  episodeRole     EpisodeRole[]
  moviePersonRole MoviePersonRole[]
  showPersonRole  ShowPersonRole[]
  showSeasonRole  ShowSeasonRole[]
  trackPersonRole TrackPersonRole[]
  trackUnitRole   TrackUnitRole[]

  @@map("role")
}

model Show {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String           @unique
  nameSort       String           @unique @map("name_sort")
  contentRating  String           @map("content_rating")
  airedDate      DateTime?        @map("aired_date") @db.Date
  tagline        String           @unique
  rating         Decimal?         @db.Decimal(3, 1)
  description    String
  studioId       String           @map("studio_id") @db.Uuid
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
  studio         Studio           @relation(fields: [studioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  showAlias      ShowAlias[]
  showPersonRole ShowPersonRole[]
  showSeason     ShowSeason[]
  tag            Tag[]            @relation("show_tag")

  @@map("show")
}

model ShowAlias {
  id     String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  alias  String
  showId String @map("show_id") @db.Uuid
  show   Show   @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("show_alias")
}

model ShowPersonRole {
  showId    String   @map("show_id") @db.Uuid
  personId  String   @map("person_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([showId, personId, roleId])
  @@map("show_person_role")
}

model ShowSeason {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  showId         String           @map("show_id") @db.Uuid
  name           String
  seasonNo       Int              @map("season_no")
  description    String
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
  show           Show             @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  episode        Episode[]
  showSeasonRole ShowSeasonRole[]

  @@unique([showId, seasonNo])
  @@map("show_season")
}

model ShowSeasonRole {
  showSeasonId String     @map("show_season_id") @db.Uuid
  personId     String     @map("person_id") @db.Uuid
  roleId       String     @map("role_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  person       Person     @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  showSeason   ShowSeason @relation(fields: [showSeasonId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([showSeasonId, personId, roleId])
  @@map("show_season_role")
}

model Studio {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  movie       Movie[]
  show        Show[]

  @@map("studio")
}

model Tag {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @unique
  description String
  categoryId  String       @map("category_id") @db.Uuid
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)
  tagCategory TagCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  attachment  Attachment[]
  album       Album[]      @relation("album_tag")
  episode     Episode[]    @relation("episode_tag")
  movie       Movie[]      @relation("movie_tag")
  person      Person[]     @relation("person_tag")
  show        Show[]       @relation("show_tag")
  track       Track[]      @relation("tag_track")
  unit        Unit[]       @relation("tag_unit")

  @@map("tag")
}

model TagCategory {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @unique
  description String
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)
  attachment  Attachment[]
  tag         Tag[]

  @@map("tag_category")
}

model Track {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique
  nameSort        String            @unique @map("name_sort")
  description     String
  albumId         String            @map("album_id") @db.Uuid
  rating          Decimal?          @db.Decimal(3, 1)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  album           Album             @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trackPersonRole TrackPersonRole[]
  trackUnitRole   TrackUnitRole[]
  tag             Tag[]             @relation("tag_track")

  @@map("track")
}

model TrackPersonRole {
  trackId   String   @map("track_id") @db.Uuid
  personId  String   @map("person_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([trackId, personId, roleId])
  @@map("track_person_role")
}

model TrackUnitRole {
  trackId   String   @map("track_id") @db.Uuid
  unitId    String   @map("unit_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([trackId, unitId, roleId])
  @@map("track_unit_role")
}

model Unit {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  description   String
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  albumUnitRole AlbumUnitRole[]
  trackUnitRole TrackUnitRole[]
  person        Person[]        @relation("person_unit")
  tag           Tag[]           @relation("tag_unit")

  @@map("unit")
}

model Version {
  id        BigInt   @id @default(autoincrement())
  name      String
  version   Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("version")
}

generator client {
  provider = "prisma-client-js"
}