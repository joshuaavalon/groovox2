datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model album {
  id                                              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                         String            @unique @db.Uuid
  name_sort_id                                    String            @unique @db.Uuid
  rating                                          Decimal?          @db.Decimal(3, 1)
  description_id                                  String            @unique @db.Uuid
  release_date                                    DateTime?         @db.Date
  person_id                                       String            @db.Uuid
  created_at                                      DateTime          @default(now()) @db.Timestamp(6)
  multilingual_album_description_idTomultilingual multilingual      @relation("album_description_idTomultilingual", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_album_name_idTomultilingual        multilingual      @relation("album_name_idTomultilingual", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_album_name_sort_idTomultilingual   multilingual      @relation("album_name_sort_idTomultilingual", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  person                                          person            @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  album_attachment                                album_attachment?
  track                                           track[]
}

model album_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  album_id   String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  album      album    @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model collection {
  id                                                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                              String                 @unique @db.Uuid
  description_id                                       String                 @db.Uuid
  created_at                                           DateTime               @default(now()) @db.Timestamp(6)
  multilingual_collection_description_idTomultilingual multilingual           @relation("collection_description_idTomultilingual", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_collection_name_idTomultilingual        multilingual           @relation("collection_name_idTomultilingual", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  collection_attachment                                collection_attachment?
}

model collection_attachment {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  collection_id String     @unique @db.Uuid
  uploaded      Boolean?   @default(false)
  variant       String
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  collection    collection @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model country {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code         String       @unique
  name_id      String       @unique @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  multilingual multilingual @relation(fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model episode {
  id                                                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                           String              @unique @db.Uuid
  name_sort_id                                      String              @unique @db.Uuid
  content_rating                                    String
  aired                                             DateTime?           @db.Date
  rating                                            Decimal?            @db.Decimal(3, 1)
  description_id                                    String              @unique @db.Uuid
  season_id                                         String              @db.Uuid
  episode_no                                        Int
  created_at                                        DateTime            @default(now()) @db.Timestamp(6)
  multilingual_episode_description_idTomultilingual multilingual        @relation("episode_description_idTomultilingual", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_episode_name_idTomultilingual        multilingual        @relation("episode_name_idTomultilingual", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_episode_name_sort_idTomultilingual   multilingual        @relation("episode_name_sort_idTomultilingual", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  show_season                                       show_season         @relation(fields: [season_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  episode_attachment                                episode_attachment?

  @@unique([season_id, episode_no])
}

model episode_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  episode_id String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  episode    episode  @relation(fields: [episode_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model genre {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id      String       @unique @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  multilingual multilingual @relation(fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model language {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String         @unique
  iso          String         @unique
  multilingual multilingual[]
  text         text?
}

model mood {
  id                                             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                        String       @unique @db.Uuid
  description_id                                 String       @unique @db.Uuid
  multilingual_mood_description_idTomultilingual multilingual @relation("mood_description_idTomultilingual", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_mood_name_idTomultilingual        multilingual @relation("mood_name_idTomultilingual", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model movie {
  id                                              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                         String            @unique @db.Uuid
  name_sort_id                                    String            @unique @db.Uuid
  content_rating                                  String
  aired                                           DateTime?         @db.Date
  tagline_id                                      String            @unique @db.Uuid
  rating                                          Decimal?          @db.Decimal(3, 1)
  description_id                                  String            @unique @db.Uuid
  created_at                                      DateTime          @default(now()) @db.Timestamp(6)
  multilingual_movie_description_idTomultilingual multilingual      @relation("movie_description_idTomultilingual", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_movie_name_idTomultilingual        multilingual      @relation("movie_name_idTomultilingual", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_movie_name_sort_idTomultilingual   multilingual      @relation("movie_name_sort_idTomultilingual", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_movie_tagline_idTomultilingual     multilingual      @relation("movie_tagline_idTomultilingual", fields: [tagline_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie_attachment                                movie_attachment?
}

model movie_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  movie_id   String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  movie      movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model multilingual {
  id                                                   String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  default_language_id                                  String       @db.Uuid
  language                                             language     @relation(fields: [default_language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  album_album_description_idTomultilingual             album?       @relation("album_description_idTomultilingual")
  album_album_name_idTomultilingual                    album?       @relation("album_name_idTomultilingual")
  album_album_name_sort_idTomultilingual               album?       @relation("album_name_sort_idTomultilingual")
  collection_collection_description_idTomultilingual   collection[] @relation("collection_description_idTomultilingual")
  collection_collection_name_idTomultilingual          collection?  @relation("collection_name_idTomultilingual")
  country                                              country?
  episode_episode_description_idTomultilingual         episode?     @relation("episode_description_idTomultilingual")
  episode_episode_name_idTomultilingual                episode?     @relation("episode_name_idTomultilingual")
  episode_episode_name_sort_idTomultilingual           episode?     @relation("episode_name_sort_idTomultilingual")
  genre                                                genre?
  mood_mood_description_idTomultilingual               mood?        @relation("mood_description_idTomultilingual")
  mood_mood_name_idTomultilingual                      mood?        @relation("mood_name_idTomultilingual")
  movie_movie_description_idTomultilingual             movie?       @relation("movie_description_idTomultilingual")
  movie_movie_name_idTomultilingual                    movie?       @relation("movie_name_idTomultilingual")
  movie_movie_name_sort_idTomultilingual               movie?       @relation("movie_name_sort_idTomultilingual")
  movie_movie_tagline_idTomultilingual                 movie?       @relation("movie_tagline_idTomultilingual")
  person_multilingualToperson_description_id           person?      @relation("multilingualToperson_description_id")
  person_multilingualToperson_name_id                  person?      @relation("multilingualToperson_name_id")
  person_multilingualToperson_name_sort_id             person?      @relation("multilingualToperson_name_sort_id")
  show_multilingualToshow_description_id               show?        @relation("multilingualToshow_description_id")
  show_multilingualToshow_name_id                      show?        @relation("multilingualToshow_name_id")
  show_multilingualToshow_name_sort_id                 show?        @relation("multilingualToshow_name_sort_id")
  show_multilingualToshow_tagline_id                   show?        @relation("multilingualToshow_tagline_id")
  show_season_multilingualToshow_season_description_id show_season? @relation("multilingualToshow_season_description_id")
  show_season_multilingualToshow_season_name_id        show_season? @relation("multilingualToshow_season_name_id")
  studio_multilingualTostudio_description_id           studio?      @relation("multilingualTostudio_description_id")
  studio_multilingualTostudio_name_id                  studio?      @relation("multilingualTostudio_name_id")
  style_multilingualTostyle_description_id             style?       @relation("multilingualTostyle_description_id")
  style_multilingualTostyle_name_id                    style?       @relation("multilingualTostyle_name_id")
  text                                                 text?
  track_multilingualTotrack_description_id             track?       @relation("multilingualTotrack_description_id")
  track_multilingualTotrack_name_id                    track?       @relation("multilingualTotrack_name_id")
  track_multilingualTotrack_name_sort_id               track?       @relation("multilingualTotrack_name_sort_id")
}

model person {
  id                                               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                          String             @unique @db.Uuid
  name_sort_id                                     String             @unique @db.Uuid
  description_id                                   String             @unique @db.Uuid
  created_at                                       DateTime           @default(now()) @db.Timestamp(6)
  multilingual_multilingualToperson_description_id multilingual       @relation("multilingualToperson_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToperson_name_id        multilingual       @relation("multilingualToperson_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToperson_name_sort_id   multilingual       @relation("multilingualToperson_name_sort_id", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  album                                            album[]
  person_attachment                                person_attachment?
  person_b                                         person[]           @relation("person_similar")
  person_a                                         person[]           @relation("person_similar")
}

model person_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  person_id  String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  person     person   @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model show {
  id                                             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                        String           @unique @db.Uuid
  name_sort_id                                   String           @unique @db.Uuid
  content_rating                                 String
  aired                                          DateTime?        @db.Date
  tagline_id                                     String           @unique @db.Uuid
  rating                                         Decimal?         @db.Decimal(3, 1)
  description_id                                 String           @unique @db.Uuid
  created_at                                     DateTime         @default(now()) @db.Timestamp(6)
  multilingual_multilingualToshow_description_id multilingual     @relation("multilingualToshow_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToshow_name_id        multilingual     @relation("multilingualToshow_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToshow_name_sort_id   multilingual     @relation("multilingualToshow_name_sort_id", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToshow_tagline_id     multilingual     @relation("multilingualToshow_tagline_id", fields: [tagline_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  show_attachment                                show_attachment?
  show_season                                    show_season[]
}

model show_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  show_id    String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  show       show     @relation(fields: [show_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model show_season {
  id                                                    String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  show_id                                               String       @db.Uuid
  name_id                                               String       @unique @db.Uuid
  season_no                                             Int
  description_id                                        String       @unique @db.Uuid
  multilingual_multilingualToshow_season_description_id multilingual @relation("multilingualToshow_season_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualToshow_season_name_id        multilingual @relation("multilingualToshow_season_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  show                                                  show         @relation(fields: [show_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  episode                                               episode[]

  @@unique([show_id, season_no])
}

model studio {
  id                                               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                          String       @unique @db.Uuid
  description_id                                   String       @unique @db.Uuid
  multilingual_multilingualTostudio_description_id multilingual @relation("multilingualTostudio_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualTostudio_name_id        multilingual @relation("multilingualTostudio_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model style {
  id                                              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                         String       @unique @db.Uuid
  description_id                                  String       @unique @db.Uuid
  multilingual_multilingualTostyle_description_id multilingual @relation("multilingualTostyle_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualTostyle_name_id        multilingual @relation("multilingualTostyle_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model text {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content         String
  multilingual_id String       @unique @db.Uuid
  language_id     String       @unique @db.Uuid
  language        language     @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual    multilingual @relation(fields: [multilingual_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([multilingual_id, language_id])
}

model track {
  id                                              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name_id                                         String            @unique @db.Uuid
  name_sort_id                                    String            @unique @db.Uuid
  description_id                                  String            @unique @db.Uuid
  album_id                                        String            @db.Uuid
  rating                                          Decimal?          @db.Decimal(3, 1)
  created_at                                      DateTime          @default(now()) @db.Timestamp(6)
  album                                           album             @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualTotrack_description_id multilingual      @relation("multilingualTotrack_description_id", fields: [description_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualTotrack_name_id        multilingual      @relation("multilingualTotrack_name_id", fields: [name_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  multilingual_multilingualTotrack_name_sort_id   multilingual      @relation("multilingualTotrack_name_sort_id", fields: [name_sort_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  track_attachment                                track_attachment?
}

model track_attachment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  track_id   String   @unique @db.Uuid
  uploaded   Boolean? @default(false)
  variant    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  track      track    @relation(fields: [track_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model version {
  id         BigInt   @id @default(autoincrement())
  version    String
  created_at DateTime @default(now()) @db.Timestamp(6)
}
